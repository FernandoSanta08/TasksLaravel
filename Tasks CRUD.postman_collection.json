{
	"info": {
		"_postman_id": "dd237dc3-ef3a-41f9-83d7-d23c2b94e4f0",
		"name": "Tasks CRUD",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14656192"
	},
	"item": [
		{
			"name": "Create",
			"item": [
				{
					"name": "Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const jsonData2 = pm.response.json()\r",
									"\r",
									"pm.collectionVariables.set('taskID', jsonData2.task.id)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Asegurarse de que jsonData es un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"\r",
									"    // Verificar que jsonData tiene una propiedad 'code' y que su valor es 'success'\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData.code).to.eql(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"Validaciones Postman\",\r\n        \"category_id\": \"2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Without Values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //validar que jsonData sea un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    //validar que tenga la propiedad mensaje y el texto coincida.\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.eql(\"The title field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"\",\r\n        \"category_id\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Without Min Characteres",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //validar que jsonData sea un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    //validar que tenga la propiedad mensaje y el texto coincida.\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.eql(\"The title field must be at least 3 characters.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"a\",\r\n        \"category_id\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Show",
			"item": [
				{
					"name": "Show All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 300ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/tareas",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas"
							]
						}
					},
					"response": []
				},
				{
					"name": "show",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.task.id).to.eql(parseInt(pm.variables.get('taskID')));\r",
									"});\r",
									"\r",
									"pm.test(\"Validate ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.task.title).to.eql(\"Validaciones Postman\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/tareas/{{taskID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas",
								"{{taskID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update",
			"item": [
				{
					"name": "Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Asegurarse de que jsonData es un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"\r",
									"    // Verificar que jsonData tiene una propiedad 'code' y que su valor es 'success'\r",
									"    pm.expect(jsonData).to.have.property('code');\r",
									"    pm.expect(jsonData.code).to.eql(\"success\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"Prueba actualizar \"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas/{{taskID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas",
								"{{taskID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update without values",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //validar que jsonData sea un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    //validar que tenga la propiedad mensaje y el texto coincida.\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.eql(\"The title field must be at least 3 characters.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"a\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas/{{taskID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas",
								"{{taskID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update without Min Characters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {\r",
									"    pm.response.to.have.status(422);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    //validar que jsonData sea un objeto\r",
									"    pm.expect(jsonData).to.be.an('object');\r",
									"    //validar que tenga la propiedad mensaje y el texto coincida.\r",
									"    pm.expect(jsonData).to.have.property('message');\r",
									"    pm.expect(jsonData.message).to.eql(\"The title field is required.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"title\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}/tareas/{{taskID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas",
								"{{taskID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete",
			"item": [
				{
					"name": "Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"  pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required Content-Type header\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    if (pm.response.code === 200) {\r",
									"        // Verificar que la respuesta contiene un mensaje de confirmación\r",
									"        pm.expect(jsonData).to.be.an('array');\r",
									"        pm.expect(jsonData[0]).to.eql(\"success\");\r",
									"    } else if (pm.response.code === 204) {\r",
									"        // Verificar que el cuerpo de la respuesta está vacío\r",
									"        pm.expect(pm.response.text()).to.be.empty;\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"accept": true
						}
					},
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{host}}/tareas/{{taskID}}",
							"host": [
								"{{host}}"
							],
							"path": [
								"tareas",
								"{{taskID}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "taskID",
			"value": "",
			"type": "string"
		},
		{
			"key": "host",
			"value": "",
			"type": "string"
		}
	]
}